/******************************************************************************
 *  
 * This program is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the Free 
 * Software Foundation; either version 3 of the License, or (at your option) 
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
 * more details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Author     : Jerome Fuselier
 * Creation   : June 2011
 *  
 *****************************************************************************/

package uk.ac.liv.ffmpeg.libavcodec.utils;

import uk.ac.liv.ffmpeg.libavcodec.AVCodecContext;
import uk.ac.liv.ffmpeg.libavcodec.AVCodec.CodecID;

public class Utils {
	

	public static int av_get_bits_per_sample(CodecID codec_id){
	    switch(codec_id){
//	    case CODEC_ID_ADPCM_SBPRO_2:
//	        return 2;
//	    case CODEC_ID_ADPCM_SBPRO_3:
//	        return 3;
//	    case CODEC_ID_ADPCM_SBPRO_4:
//	    case CODEC_ID_ADPCM_CT:
//	    case CODEC_ID_ADPCM_IMA_WAV:
//	    case CODEC_ID_ADPCM_MS:
//	    case CODEC_ID_ADPCM_YAMAHA:
//	        return 4;
//	    case CODEC_ID_ADPCM_G722:
	    case CODEC_ID_PCM_ALAW:
//	    case CODEC_ID_PCM_MULAW:
//	    case CODEC_ID_PCM_S8:
//	    case CODEC_ID_PCM_U8:
//	    case CODEC_ID_PCM_ZORK:
	        return 8;
	    case CODEC_ID_PCM_S16BE:
	    case CODEC_ID_PCM_S16LE:
//	    case CODEC_ID_PCM_S16LE_PLANAR:
//	    case CODEC_ID_PCM_U16BE:
//	    case CODEC_ID_PCM_U16LE:
	        return 16;
//	    case CODEC_ID_PCM_S24DAUD:
	    case CODEC_ID_PCM_S24BE:
	    case CODEC_ID_PCM_S24LE:
//	    case CODEC_ID_PCM_U24BE:
//	    case CODEC_ID_PCM_U24LE:
	        return 24;
	    case CODEC_ID_PCM_S32BE:
	    case CODEC_ID_PCM_S32LE:
//	    case CODEC_ID_PCM_U32BE:
//	    case CODEC_ID_PCM_U32LE:
//	    case CODEC_ID_PCM_F32BE:
//	    case CODEC_ID_PCM_F32LE:
	        return 32;
//	    case CODEC_ID_PCM_F64BE:
//	    case CODEC_ID_PCM_F64LE:
//	        return 64;
	    default:
	        return 0;
	    }
	}
	
	public static boolean tb_unreliable(AVCodecContext c) {
	    if (  (c.get_time_base().get_den() >= 101L * c.get_time_base().get_num())
	       || (c.get_time_base().get_den() <    5L * c.get_time_base().get_num())
	       || (c.get_codec_id() == CodecID.CODEC_ID_MPEG2VIDEO)
	       || (c.get_codec_id() == CodecID.CODEC_ID_H264) )
	        return true;
	    return false;
	}

}
